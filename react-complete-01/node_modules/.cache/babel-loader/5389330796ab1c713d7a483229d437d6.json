{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/daegilpyo/ReactCourse/react-complete-01/src/Components/Persons/Persons.js\";\nimport Person from \"./Person/Person\";\nimport React, { Component } from 'react';\n\nclass Persons extends Component {\n  //componenet life cycle hooks\n  constructor(props) {\n    super(props);\n    console.log('[Persons.js] constructor');\n  } // static getDerivedStateFromProps(props, state) {\n  //     console.log('[Persons.js] getDerivedStateFromProps');\n  //     return state;\n  // }\n\n\n  shouldComponentUpdate(nextProps, nextState) {\n    console.log('[Persons.js] shouldComponentUpdate');\n    return true;\n  }\n\n  getSnapshotBeforeUpdate(prevProprs, prevState) {\n    console.log('[Persons.js] getSnapshotBeforeUpdate');\n    console.log(`Prev Value : ${prevProprs.persons[0].name}`);\n    return {\n      message: 'Snapshot!'\n    };\n  }\n\n  componentDidUpdate(prevProprs, prevState, snapshot) {\n    console.log('[Persons.js] componentDidUpdate');\n    console.log(snapshot);\n  }\n\n  componentWillUnmount() {\n    console.log('[Persons.js] componentWillUnmount');\n  } //componenet life cycle hooks\n\n\n  render() {\n    console.log('[Persons.js] rendering...');\n    return this.props.isPressed ? this.props.persons.map((person, index) => {\n      return /*#__PURE__*/_jsxDEV(Person, {\n        name: person.name,\n        age: person.age,\n        onClick: () => this.props.onClick(index),\n        onChange: event => this.props.onChange(event, person.id)\n      }, person.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 37,\n        columnNumber: 21\n      }, this);\n    }) : null;\n  }\n\n}\n\nexport default Persons;","map":{"version":3,"sources":["/Users/daegilpyo/ReactCourse/react-complete-01/src/Components/Persons/Persons.js"],"names":["Person","React","Component","Persons","constructor","props","console","log","shouldComponentUpdate","nextProps","nextState","getSnapshotBeforeUpdate","prevProprs","prevState","persons","name","message","componentDidUpdate","snapshot","componentWillUnmount","render","isPressed","map","person","index","age","onClick","event","onChange","id"],"mappings":";;AAAA,OAAOA,MAAP,MAAmB,iBAAnB;AACA,OAAOC,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;;AAEA,MAAMC,OAAN,SAAsBD,SAAtB,CAAgC;AAC5B;AACAE,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACf,UAAMA,KAAN;AACAC,IAAAA,OAAO,CAACC,GAAR,CAAY,0BAAZ;AACH,GAL2B,CAM5B;AACA;AACA;AACA;;;AACAC,EAAAA,qBAAqB,CAACC,SAAD,EAAYC,SAAZ,EAAuB;AACxCJ,IAAAA,OAAO,CAACC,GAAR,CAAY,oCAAZ;AACA,WAAO,IAAP;AACH;;AACDI,EAAAA,uBAAuB,CAACC,UAAD,EAAaC,SAAb,EAAwB;AAC3CP,IAAAA,OAAO,CAACC,GAAR,CAAY,sCAAZ;AACAD,IAAAA,OAAO,CAACC,GAAR,CAAa,gBAAeK,UAAU,CAACE,OAAX,CAAmB,CAAnB,EAAsBC,IAAK,EAAvD;AACA,WAAO;AAAEC,MAAAA,OAAO,EAAE;AAAX,KAAP;AACH;;AACDC,EAAAA,kBAAkB,CAACL,UAAD,EAAaC,SAAb,EAAwBK,QAAxB,EAAkC;AAChDZ,IAAAA,OAAO,CAACC,GAAR,CAAY,iCAAZ;AACAD,IAAAA,OAAO,CAACC,GAAR,CAAYW,QAAZ;AACH;;AACDC,EAAAA,oBAAoB,GAAG;AACnBb,IAAAA,OAAO,CAACC,GAAR,CAAY,mCAAZ;AACH,GAzB2B,CA2B5B;;;AAGAa,EAAAA,MAAM,GAAG;AACLd,IAAAA,OAAO,CAACC,GAAR,CAAY,2BAAZ;AACA,WAAO,KAAKF,KAAL,CAAWgB,SAAX,GAAuB,KAAKhB,KAAL,CAAWS,OAAX,CAAmBQ,GAAnB,CAAuB,CAACC,MAAD,EAASC,KAAT,KAAmB;AACpE,0BAAQ,QAAC,MAAD;AAAwB,QAAA,IAAI,EAAED,MAAM,CAACR,IAArC;AACJ,QAAA,GAAG,EAAEQ,MAAM,CAACE,GADR;AACa,QAAA,OAAO,EAAE,MAAM,KAAKpB,KAAL,CAAWqB,OAAX,CAAmBF,KAAnB,CAD5B;AAEJ,QAAA,QAAQ,EAAGG,KAAD,IAAW,KAAKtB,KAAL,CAAWuB,QAAX,CAAoBD,KAApB,EAA2BJ,MAAM,CAACM,EAAlC;AAFjB,SAAaN,MAAM,CAACM,EAApB;AAAA;AAAA;AAAA;AAAA,cAAR;AAGH,KAJ6B,CAAvB,GAIF,IAJL;AAKH;;AArC2B;;AAyChC,eAAe1B,OAAf","sourcesContent":["import Person from \"./Person/Person\"\nimport React, { Component } from 'react';\n\nclass Persons extends Component {\n    //componenet life cycle hooks\n    constructor(props) {\n        super(props);\n        console.log('[Persons.js] constructor');\n    }\n    // static getDerivedStateFromProps(props, state) {\n    //     console.log('[Persons.js] getDerivedStateFromProps');\n    //     return state;\n    // }\n    shouldComponentUpdate(nextProps, nextState) {\n        console.log('[Persons.js] shouldComponentUpdate');\n        return true;\n    }\n    getSnapshotBeforeUpdate(prevProprs, prevState) {\n        console.log('[Persons.js] getSnapshotBeforeUpdate');\n        console.log(`Prev Value : ${prevProprs.persons[0].name}`);\n        return { message: 'Snapshot!' };\n    }\n    componentDidUpdate(prevProprs, prevState, snapshot) {\n        console.log('[Persons.js] componentDidUpdate');\n        console.log(snapshot);\n    }\n    componentWillUnmount() {\n        console.log('[Persons.js] componentWillUnmount');\n    }\n\n    //componenet life cycle hooks\n\n\n    render() {\n        console.log('[Persons.js] rendering...');\n        return this.props.isPressed ? this.props.persons.map((person, index) => {\n            return (<Person key={person.id} name={person.name}\n                age={person.age} onClick={() => this.props.onClick(index)}\n                onChange={(event) => this.props.onChange(event, person.id)} />)\n        }) : null;\n    }\n}\n\n\nexport default Persons;"]},"metadata":{},"sourceType":"module"}