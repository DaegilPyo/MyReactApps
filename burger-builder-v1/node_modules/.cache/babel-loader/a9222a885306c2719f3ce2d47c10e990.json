{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/daegilpyo/ReactCourse/burger-builder-v1/src/containers/BurgerBuilder/BurgerBuilder.js\";\nimport { Component } from \"react\";\nimport Burger from \"./../../components/BurgerComponents/Burger/Burger\";\nimport Aux from \"../../hoc/Aux\";\nimport BuildControls from \"./../../components/BurgerComponents/BuildControls/BuildControls\";\nimport Modal from \"../../components/UI/Modal/Modal\";\nimport OrderSummary from \"../../components/BurgerComponents/OrderSummary/OrderSummary\";\nconst INGREDIENT_PRICES = {\n  salad: 0.2,\n  cheese: 0.5,\n  bacon: 0.3,\n  meat: 0.7\n};\n\nclass BurgerBuilder extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      ingredients: {\n        meat: 0,\n        cheese: 0,\n        salad: 0,\n        bacon: 0\n      },\n      totalPrice: 4,\n      purchaseable: false,\n      puchasing: false\n    };\n\n    this.addIngredientHandler = type => {\n      const oldCount = this.state.ingredients[type];\n      const updatedCount = oldCount + 1;\n      const updatedIngredients = { ...this.state.ingredients\n      };\n      updatedIngredients[type] = updatedCount;\n      const priceAddition = INGREDIENT_PRICES[type];\n      const oldPrice = this.state.totalPrice;\n      const newPrice = oldPrice + priceAddition;\n      this.setState({\n        ingredients: updatedIngredients,\n        totalPrice: newPrice\n      });\n      this.updatePurchaseState(updatedIngredients);\n    };\n\n    this.removeIngredientHandler = type => {\n      if (this.state.ingredients[type] > 0) {\n        const oldCount = this.state.ingredients[type];\n        const updatedCount = oldCount - 1;\n        const updatedIngredients = { ...this.state.ingredients\n        };\n        updatedIngredients[type] = updatedCount;\n        const priceAddition = INGREDIENT_PRICES[type];\n        const oldPrice = this.state.totalPrice;\n        const newPrice = oldPrice - priceAddition;\n        this.setState({\n          ingredients: updatedIngredients,\n          totalPrice: newPrice\n        });\n        this.updatePurchaseState(updatedIngredients);\n      }\n    };\n  }\n\n  updatePurchaseState(updatedIngredients) {\n    const ingredients = updatedIngredients;\n    const sum = Object.keys(ingredients).map(igKey => {\n      return ingredients[igKey];\n    }).reduce((sum, el) => sum + el, 0);\n    this.setState({\n      purchaseable: sum > 0\n    });\n  }\n\n  render() {\n    const disabledInfo = { ...this.state.ingredients\n    };\n\n    for (let key in disabledInfo) {\n      disabledInfo[key] = disabledInfo[key] <= 0;\n    }\n\n    return /*#__PURE__*/_jsxDEV(Aux, {\n      children: [/*#__PURE__*/_jsxDEV(Modal, {\n        children: /*#__PURE__*/_jsxDEV(OrderSummary, {\n          ingredients: this.state.ingredients\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 86,\n          columnNumber: 24\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Burger, {\n        ingredients: this.state.ingredients\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(BuildControls, {\n        totalPrice: this.state.totalPrice,\n        disabledInfo: disabledInfo,\n        addIngredient: this.addIngredientHandler,\n        removeIndgredient: this.removeIngredientHandler,\n        purchaseable: this.state.purchaseable\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n\nexport default BurgerBuilder;","map":{"version":3,"sources":["/Users/daegilpyo/ReactCourse/burger-builder-v1/src/containers/BurgerBuilder/BurgerBuilder.js"],"names":["Component","Burger","Aux","BuildControls","Modal","OrderSummary","INGREDIENT_PRICES","salad","cheese","bacon","meat","BurgerBuilder","state","ingredients","totalPrice","purchaseable","puchasing","addIngredientHandler","type","oldCount","updatedCount","updatedIngredients","priceAddition","oldPrice","newPrice","setState","updatePurchaseState","removeIngredientHandler","sum","Object","keys","map","igKey","reduce","el","render","disabledInfo","key"],"mappings":"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","sourcesContent":["import { Component } from \"react\";\nimport Burger from \"./../../components/BurgerComponents/Burger/Burger\"\nimport Aux from \"../../hoc/Aux\";\nimport BuildControls from \"./../../components/BurgerComponents/BuildControls/BuildControls\";\nimport Modal from \"../../components/UI/Modal/Modal\";\nimport OrderSummary from \"../../components/BurgerComponents/OrderSummary/OrderSummary\";\n\nconst INGREDIENT_PRICES = {\n    salad: 0.2,\n    cheese: 0.5,\n    bacon: 0.3,\n    meat: 0.7,\n}\nclass BurgerBuilder extends Component {\n    // constructor(props) {\n    //     super(props);\n    //     this.state = {\n\n    //     }\n    // }\n    state = {\n        ingredients: {\n            meat: 0,\n            cheese: 0,\n            salad: 0,\n            bacon: 0,\n        },\n        totalPrice: 4,\n        purchaseable: false,\n        puchasing: false,\n    }\n\n    updatePurchaseState(updatedIngredients) {\n        const ingredients = updatedIngredients;\n        const sum = Object.keys(ingredients).map((igKey) => {\n            return ingredients[igKey];\n        }).reduce((sum, el) => sum + el, 0);\n        this.setState({\n            purchaseable: sum > 0,\n        });\n    }\n    addIngredientHandler = (type) => {\n        const oldCount = this.state.ingredients[type];\n        const updatedCount = oldCount + 1;\n        const updatedIngredients = {\n            ...this.state.ingredients\n        };\n        updatedIngredients[type] = updatedCount;\n\n        const priceAddition = INGREDIENT_PRICES[type];\n        const oldPrice = this.state.totalPrice;\n        const newPrice = oldPrice + priceAddition;\n        this.setState({\n            ingredients: updatedIngredients,\n            totalPrice: newPrice,\n        });\n        this.updatePurchaseState(updatedIngredients);\n    }\n    removeIngredientHandler = (type) => {\n        if (this.state.ingredients[type] > 0) {\n            const oldCount = this.state.ingredients[type];\n            const updatedCount = oldCount - 1;\n            const updatedIngredients = {\n                ...this.state.ingredients\n            };\n            updatedIngredients[type] = updatedCount;\n            const priceAddition = INGREDIENT_PRICES[type];\n            const oldPrice = this.state.totalPrice;\n            const newPrice = oldPrice - priceAddition;\n            this.setState({\n                ingredients: updatedIngredients,\n                totalPrice: newPrice,\n            });\n            this.updatePurchaseState(updatedIngredients);\n        }\n    }\n    render() {\n        const disabledInfo = {\n            ...this.state.ingredients\n        };\n        for (let key in disabledInfo) {\n            disabledInfo[key] = disabledInfo[key] <= 0;\n        }\n        return (\n            <Aux>\n                <Modal><OrderSummary ingredients={this.state.ingredients} /></Modal>\n                <Burger ingredients={this.state.ingredients}></Burger>\n                <BuildControls totalPrice={this.state.totalPrice}\n                    disabledInfo={disabledInfo}\n                    addIngredient={this.addIngredientHandler}\n                    removeIndgredient={this.removeIngredientHandler}\n                    purchaseable={this.state.purchaseable}\n                />\n            </Aux>\n        );\n    };\n}\n\nexport default BurgerBuilder;"]},"metadata":{},"sourceType":"module"}