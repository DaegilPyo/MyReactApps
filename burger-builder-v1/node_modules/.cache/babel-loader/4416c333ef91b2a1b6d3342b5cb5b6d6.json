{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/daegilpyo/ReactCourse/burger-builder-v1/src/containers/Checkout/ContactData/ContactData.js\";\nimport React, { Component } from \"react\";\nimport CustomButton from \"../../../components/UI/Button/Button\";\nimport classes from './ContactData.module.css';\nimport axios from '../../../axios-order';\nimport Spinner from \"../../../components/UI/Spinner/Spinner\";\nimport CustomInput from \"../../../components/UI/Input/CustomInput\";\n\nclass ContactData extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      orderForm: {\n        name: {\n          elementType: 'input',\n          elementConfig: {\n            type: 'text',\n            placeholder: 'Your Name'\n          },\n          value: '',\n          validation: {\n            required: true,\n            minLength: 3,\n            maxLength: 10\n          },\n          isValid: false,\n          touched: false\n        },\n        email: {\n          elementType: 'input',\n          elementConfig: {\n            type: 'email',\n            placeholder: 'Your email'\n          },\n          value: '',\n          validation: {\n            required: true\n          },\n          isValid: false,\n          touched: false\n        },\n        street: {\n          elementType: 'input',\n          elementConfig: {\n            type: 'text',\n            placeholder: 'Your street'\n          },\n          value: '',\n          validation: {\n            required: true\n          },\n          isValid: false,\n          touched: false\n        },\n        zipCode: {\n          elementType: 'input',\n          elementConfig: {\n            type: 'text',\n            placeholder: 'Your zipCode'\n          },\n          value: '',\n          validation: {\n            required: true\n          },\n          isValid: false,\n          touched: false\n        },\n        country: {\n          elementType: 'input',\n          elementConfig: {\n            type: 'text',\n            placeholder: 'Your Country'\n          },\n          value: '',\n          validation: {\n            required: true\n          },\n          isValid: false,\n          touched: false\n        },\n        deliveryMethod: {\n          elementType: 'select',\n          elementConfig: {\n            options: [{\n              value: \"fastest\",\n              displayValue: \"Fastest\"\n            }, {\n              value: \"cheapest\",\n              displayValue: \"Cheapest\"\n            }]\n          },\n          validation: {},\n          value: '',\n          isValid: true,\n          touched: false\n        }\n      },\n      loading: false,\n      formIsValid: false\n    };\n\n    this.orderHandler = event => {\n      event.preventDefault();\n      this.setState({\n        loading: true\n      });\n      const formData = {};\n\n      for (let formElementIdentifier in this.state.orderForm) {\n        formData[formElementIdentifier] = this.state.orderForm[formElementIdentifier].value;\n      }\n\n      const order = {\n        ingredients: this.props.ingredients,\n        price: this.props.totalPrice,\n        orderData: formData\n      };\n      axios.post('/orders.json', order).then(response => {\n        console.log(response);\n        this.setState({\n          puchasing: false,\n          loading: false\n        });\n        this.props.history.push('/');\n      }).catch(err => {\n        console.log(err);\n        this.setState({\n          loading: false,\n          puchasing: false\n        });\n      });\n    };\n\n    this.onChangeHandler = (event, inputIdentifier) => {\n      let updatedOrderForm = { ...this.state.orderForm\n      };\n      const updatedFormEl = updatedOrderForm[inputIdentifier];\n      updatedFormEl.value = event.target.value;\n      updatedFormEl.isValid = this.checkValidity(updatedFormEl.value, updatedFormEl.validation);\n      updatedFormEl.touched = true;\n      updatedOrderForm[inputIdentifier] = updatedFormEl;\n      let formIsvalid = true;\n\n      for (let inputIdentifiers in updatedOrderForm) {\n        formIsvalid = updatedOrderForm[inputIdentifiers].isValid && formIsvalid;\n      }\n\n      this.setState({\n        orderForm: updatedOrderForm,\n        formIsvalid: formIsvalid\n      });\n      console.log(this.state.formIsValid);\n    };\n  }\n\n  checkValidity(value, rules) {\n    let isValid = true;\n\n    if (rules.required) {\n      isValid = value.trim() !== '' && isValid;\n    }\n\n    if (rules.maxLength) {\n      isValid = value.length <= rules.maxLength && isValid;\n    }\n\n    if (rules.minLength) {\n      isValid = value.length >= rules.minLength && isValid;\n    }\n\n    return isValid;\n  }\n\n  render() {\n    const formElementArray = [];\n\n    for (let key in this.state.orderForm) {\n      formElementArray.push({\n        id: key,\n        config: this.state.orderForm[key]\n      });\n    }\n\n    let form = /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: this.orderHandler,\n      children: [formElementArray.map(formElement => /*#__PURE__*/_jsxDEV(CustomInput, {\n        shouldValidate: formElement.config.validation,\n        isValid: formElement.config.isValid,\n        changed: event => this.onChangeHandler(event, formElement.id),\n        elementType: formElement.config.elementType,\n        elementConfig: formElement.config.elementConfig,\n        value: formElement.config.value,\n        touched: formElement.config.touched\n      }, formElement.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 165,\n        columnNumber: 21\n      }, this)), /*#__PURE__*/_jsxDEV(CustomButton, {\n        disabled: !this.state.formIsValid,\n        btnType: \"Success\",\n        children: \"ORDER\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 179,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 163,\n      columnNumber: 13\n    }, this);\n\n    if (this.state.loading) {\n      form = /*#__PURE__*/_jsxDEV(Spinner, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 183,\n        columnNumber: 20\n      }, this);\n    }\n\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: classes.ContactData,\n      children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n        children: \"Enter your Contact Data\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 187,\n        columnNumber: 17\n      }, this), form]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 186,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n\nexport default ContactData;","map":{"version":3,"sources":["/Users/daegilpyo/ReactCourse/burger-builder-v1/src/containers/Checkout/ContactData/ContactData.js"],"names":["React","Component","CustomButton","classes","axios","Spinner","CustomInput","ContactData","state","orderForm","name","elementType","elementConfig","type","placeholder","value","validation","required","minLength","maxLength","isValid","touched","email","street","zipCode","country","deliveryMethod","options","displayValue","loading","formIsValid","orderHandler","event","preventDefault","setState","formData","formElementIdentifier","order","ingredients","props","price","totalPrice","orderData","post","then","response","console","log","puchasing","history","push","catch","err","onChangeHandler","inputIdentifier","updatedOrderForm","updatedFormEl","target","checkValidity","formIsvalid","inputIdentifiers","rules","trim","length","render","formElementArray","key","id","config","form","map","formElement"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,YAAP,MAAyB,sCAAzB;AACA,OAAOC,OAAP,MAAoB,0BAApB;AACA,OAAOC,KAAP,MAAkB,sBAAlB;AACA,OAAOC,OAAP,MAAoB,wCAApB;AACA,OAAOC,WAAP,MAAwB,0CAAxB;;AACA,MAAMC,WAAN,SAA0BN,SAA1B,CAAoC;AAAA;AAAA;AAAA,SAChCO,KADgC,GACxB;AACJC,MAAAA,SAAS,EAAE;AACPC,QAAAA,IAAI,EAAE;AACFC,UAAAA,WAAW,EAAE,OADX;AAEFC,UAAAA,aAAa,EAAE;AACXC,YAAAA,IAAI,EAAE,MADK;AAEXC,YAAAA,WAAW,EAAE;AAFF,WAFb;AAMFC,UAAAA,KAAK,EAAE,EANL;AAOFC,UAAAA,UAAU,EAAE;AACRC,YAAAA,QAAQ,EAAE,IADF;AAERC,YAAAA,SAAS,EAAE,CAFH;AAGRC,YAAAA,SAAS,EAAE;AAHH,WAPV;AAYFC,UAAAA,OAAO,EAAE,KAZP;AAaFC,UAAAA,OAAO,EAAE;AAbP,SADC;AAgBPC,QAAAA,KAAK,EAAE;AACHX,UAAAA,WAAW,EAAE,OADV;AAEHC,UAAAA,aAAa,EAAE;AACXC,YAAAA,IAAI,EAAE,OADK;AAEXC,YAAAA,WAAW,EAAE;AAFF,WAFZ;AAMHC,UAAAA,KAAK,EAAE,EANJ;AAOHC,UAAAA,UAAU,EAAE;AACRC,YAAAA,QAAQ,EAAE;AADF,WAPT;AAUHG,UAAAA,OAAO,EAAE,KAVN;AAWHC,UAAAA,OAAO,EAAE;AAXN,SAhBA;AA8BPE,QAAAA,MAAM,EAAE;AACJZ,UAAAA,WAAW,EAAE,OADT;AAEJC,UAAAA,aAAa,EAAE;AACXC,YAAAA,IAAI,EAAE,MADK;AAEXC,YAAAA,WAAW,EAAE;AAFF,WAFX;AAMJC,UAAAA,KAAK,EAAE,EANH;AAOJC,UAAAA,UAAU,EAAE;AACRC,YAAAA,QAAQ,EAAE;AADF,WAPR;AAUJG,UAAAA,OAAO,EAAE,KAVL;AAWJC,UAAAA,OAAO,EAAE;AAXL,SA9BD;AA4CPG,QAAAA,OAAO,EAAE;AACLb,UAAAA,WAAW,EAAE,OADR;AAELC,UAAAA,aAAa,EAAE;AACXC,YAAAA,IAAI,EAAE,MADK;AAEXC,YAAAA,WAAW,EAAE;AAFF,WAFV;AAMLC,UAAAA,KAAK,EAAE,EANF;AAOLC,UAAAA,UAAU,EAAE;AACRC,YAAAA,QAAQ,EAAE;AADF,WAPP;AAULG,UAAAA,OAAO,EAAE,KAVJ;AAWLC,UAAAA,OAAO,EAAE;AAXJ,SA5CF;AA0DPI,QAAAA,OAAO,EAAE;AACLd,UAAAA,WAAW,EAAE,OADR;AAELC,UAAAA,aAAa,EAAE;AACXC,YAAAA,IAAI,EAAE,MADK;AAEXC,YAAAA,WAAW,EAAE;AAFF,WAFV;AAMLC,UAAAA,KAAK,EAAE,EANF;AAOLC,UAAAA,UAAU,EAAE;AACRC,YAAAA,QAAQ,EAAE;AADF,WAPP;AAULG,UAAAA,OAAO,EAAE,KAVJ;AAWLC,UAAAA,OAAO,EAAE;AAXJ,SA1DF;AAuEPK,QAAAA,cAAc,EAAE;AACZf,UAAAA,WAAW,EAAE,QADD;AAEZC,UAAAA,aAAa,EAAE;AACXe,YAAAA,OAAO,EAAE,CACL;AAAEZ,cAAAA,KAAK,EAAE,SAAT;AAAoBa,cAAAA,YAAY,EAAE;AAAlC,aADK,EAEL;AAAEb,cAAAA,KAAK,EAAE,UAAT;AAAqBa,cAAAA,YAAY,EAAE;AAAnC,aAFK;AADE,WAFH;AAQZZ,UAAAA,UAAU,EAAE,EARA;AAUZD,UAAAA,KAAK,EAAE,EAVK;AAWZK,UAAAA,OAAO,EAAE,IAXG;AAYZC,UAAAA,OAAO,EAAE;AAZG;AAvET,OADP;AAuFJQ,MAAAA,OAAO,EAAE,KAvFL;AAwFJC,MAAAA,WAAW,EAAE;AAxFT,KADwB;;AAAA,SA4FhCC,YA5FgC,GA4FhBC,KAAD,IAAW;AACtBA,MAAAA,KAAK,CAACC,cAAN;AACA,WAAKC,QAAL,CAAc;AAAEL,QAAAA,OAAO,EAAE;AAAX,OAAd;AACA,YAAMM,QAAQ,GAAG,EAAjB;;AAEA,WAAK,IAAIC,qBAAT,IAAkC,KAAK5B,KAAL,CAAWC,SAA7C,EAAwD;AACpD0B,QAAAA,QAAQ,CAACC,qBAAD,CAAR,GAAkC,KAAK5B,KAAL,CAAWC,SAAX,CAAqB2B,qBAArB,EAA4CrB,KAA9E;AACH;;AACD,YAAMsB,KAAK,GAAG;AACVC,QAAAA,WAAW,EAAE,KAAKC,KAAL,CAAWD,WADd;AAEVE,QAAAA,KAAK,EAAE,KAAKD,KAAL,CAAWE,UAFR;AAGVC,QAAAA,SAAS,EAAEP;AAHD,OAAd;AAKA/B,MAAAA,KAAK,CAACuC,IAAN,CAAW,cAAX,EAA2BN,KAA3B,EAAkCO,IAAlC,CAAuCC,QAAQ,IAAI;AAC/CC,QAAAA,OAAO,CAACC,GAAR,CAAYF,QAAZ;AACA,aAAKX,QAAL,CAAc;AAAEc,UAAAA,SAAS,EAAE,KAAb;AAAoBnB,UAAAA,OAAO,EAAE;AAA7B,SAAd;AACA,aAAKU,KAAL,CAAWU,OAAX,CAAmBC,IAAnB,CAAwB,GAAxB;AACH,OAJD,EAIGC,KAJH,CAISC,GAAG,IAAI;AACZN,QAAAA,OAAO,CAACC,GAAR,CAAYK,GAAZ;AACA,aAAKlB,QAAL,CAAc;AAAEL,UAAAA,OAAO,EAAE,KAAX;AAAkBmB,UAAAA,SAAS,EAAE;AAA7B,SAAd;AACH,OAPD;AAUH,KAnH+B;;AAAA,SAoIhCK,eApIgC,GAoId,CAACrB,KAAD,EAAQsB,eAAR,KAA4B;AAC1C,UAAIC,gBAAgB,GAAG,EAAE,GAAG,KAAK/C,KAAL,CAAWC;AAAhB,OAAvB;AACA,YAAM+C,aAAa,GAAGD,gBAAgB,CAACD,eAAD,CAAtC;AACAE,MAAAA,aAAa,CAACzC,KAAd,GAAsBiB,KAAK,CAACyB,MAAN,CAAa1C,KAAnC;AACAyC,MAAAA,aAAa,CAACpC,OAAd,GAAwB,KAAKsC,aAAL,CAAmBF,aAAa,CAACzC,KAAjC,EAAwCyC,aAAa,CAACxC,UAAtD,CAAxB;AACAwC,MAAAA,aAAa,CAACnC,OAAd,GAAwB,IAAxB;AACAkC,MAAAA,gBAAgB,CAACD,eAAD,CAAhB,GAAoCE,aAApC;AACA,UAAIG,WAAW,GAAG,IAAlB;;AACA,WAAK,IAAIC,gBAAT,IAA6BL,gBAA7B,EAA+C;AAC3CI,QAAAA,WAAW,GAAGJ,gBAAgB,CAACK,gBAAD,CAAhB,CAAmCxC,OAAnC,IAA8CuC,WAA5D;AACH;;AACD,WAAKzB,QAAL,CAAc;AAAEzB,QAAAA,SAAS,EAAE8C,gBAAb;AAA+BI,QAAAA,WAAW,EAAEA;AAA5C,OAAd;AACAb,MAAAA,OAAO,CAACC,GAAR,CAAY,KAAKvC,KAAL,CAAWsB,WAAvB;AACH,KAjJ+B;AAAA;;AAqHhC4B,EAAAA,aAAa,CAAC3C,KAAD,EAAQ8C,KAAR,EAAe;AACxB,QAAIzC,OAAO,GAAG,IAAd;;AACA,QAAIyC,KAAK,CAAC5C,QAAV,EAAoB;AAChBG,MAAAA,OAAO,GAAGL,KAAK,CAAC+C,IAAN,OAAiB,EAAjB,IAAuB1C,OAAjC;AACH;;AACD,QAAIyC,KAAK,CAAC1C,SAAV,EAAqB;AACjBC,MAAAA,OAAO,GAAGL,KAAK,CAACgD,MAAN,IAAgBF,KAAK,CAAC1C,SAAtB,IAAmCC,OAA7C;AACH;;AACD,QAAIyC,KAAK,CAAC3C,SAAV,EAAqB;AACjBE,MAAAA,OAAO,GAAGL,KAAK,CAACgD,MAAN,IAAgBF,KAAK,CAAC3C,SAAtB,IAAmCE,OAA7C;AACH;;AACD,WAAOA,OAAP;AACH;;AAkBD4C,EAAAA,MAAM,GAAG;AACL,UAAMC,gBAAgB,GAAG,EAAzB;;AACA,SAAK,IAAIC,GAAT,IAAgB,KAAK1D,KAAL,CAAWC,SAA3B,EAAsC;AAClCwD,MAAAA,gBAAgB,CAACf,IAAjB,CAAsB;AAClBiB,QAAAA,EAAE,EAAED,GADc;AAElBE,QAAAA,MAAM,EAAE,KAAK5D,KAAL,CAAWC,SAAX,CAAqByD,GAArB;AAFU,OAAtB;AAIH;;AACD,QAAIG,IAAI,gBACJ;AAAM,MAAA,QAAQ,EAAE,KAAKtC,YAArB;AAAA,iBACKkC,gBAAgB,CAACK,GAAjB,CAAsBC,WAAW,iBAC9B,QAAC,WAAD;AACI,QAAA,cAAc,EAAEA,WAAW,CAACH,MAAZ,CAAmBpD,UADvC;AAEI,QAAA,OAAO,EAAEuD,WAAW,CAACH,MAAZ,CAAmBhD,OAFhC;AAGI,QAAA,OAAO,EAAGY,KAAD,IAAW,KAAKqB,eAAL,CAAqBrB,KAArB,EAA4BuC,WAAW,CAACJ,EAAxC,CAHxB;AAKI,QAAA,WAAW,EAAEI,WAAW,CAACH,MAAZ,CAAmBzD,WALpC;AAMI,QAAA,aAAa,EAAE4D,WAAW,CAACH,MAAZ,CAAmBxD,aANtC;AAOI,QAAA,KAAK,EAAE2D,WAAW,CAACH,MAAZ,CAAmBrD,KAP9B;AAQI,QAAA,OAAO,EAAEwD,WAAW,CAACH,MAAZ,CAAmB/C;AARhC,SAISkD,WAAW,CAACJ,EAJrB;AAAA;AAAA;AAAA;AAAA,cADH,CADL,eAgBI,QAAC,YAAD;AAAc,QAAA,QAAQ,EAAE,CAAC,KAAK3D,KAAL,CAAWsB,WAApC;AAAiD,QAAA,OAAO,EAAC,SAAzD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAhBJ;AAAA;AAAA;AAAA;AAAA;AAAA,YADJ;;AAoBA,QAAI,KAAKtB,KAAL,CAAWqB,OAAf,EAAwB;AACpBwC,MAAAA,IAAI,gBAAG,QAAC,OAAD;AAAA;AAAA;AAAA;AAAA,cAAP;AACH;;AACD,wBACI;AAAK,MAAA,SAAS,EAAElE,OAAO,CAACI,WAAxB;AAAA,8BACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADJ,EAEK8D,IAFL;AAAA;AAAA;AAAA;AAAA;AAAA,YADJ;AAOH;;AAzL+B;;AA6LpC,eAAe9D,WAAf","sourcesContent":["import React, { Component } from \"react\";\nimport CustomButton from \"../../../components/UI/Button/Button\";\nimport classes from './ContactData.module.css';\nimport axios from '../../../axios-order';\nimport Spinner from \"../../../components/UI/Spinner/Spinner\";\nimport CustomInput from \"../../../components/UI/Input/CustomInput\";\nclass ContactData extends Component {\n    state = {\n        orderForm: {\n            name: {\n                elementType: 'input',\n                elementConfig: {\n                    type: 'text',\n                    placeholder: 'Your Name'\n                },\n                value: '',\n                validation: {\n                    required: true,\n                    minLength: 3,\n                    maxLength: 10\n                },\n                isValid: false,\n                touched: false\n            },\n            email: {\n                elementType: 'input',\n                elementConfig: {\n                    type: 'email',\n                    placeholder: 'Your email'\n                },\n                value: '',\n                validation: {\n                    required: true,\n                },\n                isValid: false,\n                touched: false\n\n            },\n            street: {\n                elementType: 'input',\n                elementConfig: {\n                    type: 'text',\n                    placeholder: 'Your street'\n                },\n                value: '',\n                validation: {\n                    required: true,\n                },\n                isValid: false,\n                touched: false\n\n            },\n            zipCode: {\n                elementType: 'input',\n                elementConfig: {\n                    type: 'text',\n                    placeholder: 'Your zipCode'\n                },\n                value: '',\n                validation: {\n                    required: true,\n                },\n                isValid: false,\n                touched: false\n\n            },\n            country: {\n                elementType: 'input',\n                elementConfig: {\n                    type: 'text',\n                    placeholder: 'Your Country'\n                },\n                value: '',\n                validation: {\n                    required: true,\n                },\n                isValid: false,\n                touched: false\n            },\n            deliveryMethod: {\n                elementType: 'select',\n                elementConfig: {\n                    options: [\n                        { value: \"fastest\", displayValue: \"Fastest\" },\n                        { value: \"cheapest\", displayValue: \"Cheapest\" }\n                    ],\n                },\n                validation: {\n                },\n                value: '',\n                isValid: true,\n                touched: false\n            },\n        },\n        loading: false,\n        formIsValid: false,\n\n    }\n    orderHandler = (event) => {\n        event.preventDefault();\n        this.setState({ loading: true });\n        const formData = {};\n\n        for (let formElementIdentifier in this.state.orderForm) {\n            formData[formElementIdentifier] = this.state.orderForm[formElementIdentifier].value;\n        }\n        const order = {\n            ingredients: this.props.ingredients,\n            price: this.props.totalPrice,\n            orderData: formData\n        }\n        axios.post('/orders.json', order).then(response => {\n            console.log(response);\n            this.setState({ puchasing: false, loading: false, });\n            this.props.history.push('/');\n        }).catch(err => {\n            console.log(err);\n            this.setState({ loading: false, puchasing: false, });\n        });\n\n\n    }\n\n    checkValidity(value, rules) {\n        let isValid = true;\n        if (rules.required) {\n            isValid = value.trim() !== '' && isValid;\n        }\n        if (rules.maxLength) {\n            isValid = value.length <= rules.maxLength && isValid;\n        }\n        if (rules.minLength) {\n            isValid = value.length >= rules.minLength && isValid;\n        }\n        return isValid;\n    }\n\n\n    onChangeHandler = (event, inputIdentifier) => {\n        let updatedOrderForm = { ...this.state.orderForm }\n        const updatedFormEl = updatedOrderForm[inputIdentifier];\n        updatedFormEl.value = event.target.value;\n        updatedFormEl.isValid = this.checkValidity(updatedFormEl.value, updatedFormEl.validation);\n        updatedFormEl.touched = true;\n        updatedOrderForm[inputIdentifier] = updatedFormEl;\n        let formIsvalid = true;\n        for (let inputIdentifiers in updatedOrderForm) {\n            formIsvalid = updatedOrderForm[inputIdentifiers].isValid && formIsvalid;\n        }\n        this.setState({ orderForm: updatedOrderForm, formIsvalid: formIsvalid });\n        console.log(this.state.formIsValid);\n    }\n\n    render() {\n        const formElementArray = [];\n        for (let key in this.state.orderForm) {\n            formElementArray.push({\n                id: key,\n                config: this.state.orderForm[key]\n            });\n        }\n        let form = (\n            <form onSubmit={this.orderHandler}>\n                {formElementArray.map((formElement =>\n                    <CustomInput\n                        shouldValidate={formElement.config.validation}\n                        isValid={formElement.config.isValid}\n                        changed={(event) => this.onChangeHandler(event, formElement.id)}\n                        key={formElement.id}\n                        elementType={formElement.config.elementType}\n                        elementConfig={formElement.config.elementConfig}\n                        value={formElement.config.value}\n                        touched={formElement.config.touched}\n                    />))}\n                {/* <CustomInput inputtpe=\"input\" label=\"Name\" placeholder=\"Your Name\" />\n                <CustomInput inputtpe=\"input\" label=\"Email\" placeholder=\"Your Email\" />\n                <CustomInput inputtpe=\"input\" label=\"Street\" placeholder=\"Your Street\" />\n                <CustomInput inputtpe=\"input\" label=\"Postal\" placeholder=\"Your Postal\" /> */}\n                <CustomButton disabled={!this.state.formIsValid} btnType=\"Success\" >ORDER</CustomButton>\n            </form>\n        );\n        if (this.state.loading) {\n            form = <Spinner></Spinner>\n        }\n        return (\n            <div className={classes.ContactData}>\n                <h4>Enter your Contact Data</h4>\n                {form}\n\n            </div>\n        );\n    }\n\n}\n\nexport default ContactData;"]},"metadata":{},"sourceType":"module"}